@using Microsoft.AspNetCore.Authorization
@inject IAuthorizationService AuthorizationService

@using IsaProject.Models.Users
@using Microsoft.AspNetCore.Identity
@inject SignInManager<AppUser> SignInManager
@inject UserManager<AppUser> UserManager
@model IEnumerable<IsaProject.Models.Entities.Entity>

@{
    ViewData["Title"] = "Index";
}

<h1>Appeal entities</h1>



<table class="table">
    <thead>
        <tr>
            <th>
                @Html.DisplayNameFor(model => model.Name)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Address)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Country)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.City)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.PromotionalDescription)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.AverageScore)
            </th>
            <th></th>
        </tr>
    </thead>
    <tbody>
@foreach (var item in Model) {
        <tr>
            <td>
                @Html.DisplayFor(modelItem => item.Name)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Address)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Country)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.City)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.PromotionalDescription)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.AverageScore)
            </td>

 @if (SignInManager.IsSignedIn(User))
{
    @if ((await AuthorizationService.AuthorizeAsync(User, null, "UserPolicy")).Succeeded)
    {
            <td>
                <a asp-controller = "Appeals" asp-action="Create" asp-route-id="@item.Id">Appeal</a>
            </td>
    }
}
        </tr>
}
    </tbody>
</table>